from typing import Optional

from fastapi import Depends
from sqlalchemy.ext.asyncio import AsyncSession
from starlette.requests import Request
from starlette.websockets import WebSocket

from app.database import get_db_session
from app.repositories.chat_repository import ChatRepository
from app.repositories.user_repository import UserRepository
from app.services.chat_service import ChatService
from app.services.user_service import UserService
from app.users.utils import get_user_uuid_from_token
from app.database.database import DBSession

async def create_user_service(db: AsyncSession = Depends(get_db_session)) -> UserService:
    user_repo = UserRepository(db=db)
    return UserService(user_repo=user_repo)

async def create_chat_service(DBSession: DBSession) -> ChatService:
    chat_repo = ChatRepository(db=DBSession)
    return ChatService(chat_repo=chat_repo)


async def get_uuid_request(request: Request) -> Optional[str]:
    token = request.headers.get("Authorization")
    return await get_user_uuid_from_token(token=token)


async def get_uuid_ws(ws: WebSocket) -> Optional[str]:
    token = ws.headers.get("Authorization")
    return await get_user_uuid_from_token(token=token)
